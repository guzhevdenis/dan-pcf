/******************************************************************************
* $HeadURL: https://svnpub.codac.iter.org/codac/iter/codac/dev/units/m-codac-unit-templates/branches/codac-core-6.3/templates/cpp-sdn/main/c++/prog/prog.cpp.template $
* $Id: prog.cpp.template 116150 2021-01-04 09:45:04Z kimh19 $
*
* Project	: CODAC Core System
*
* Description	: MyFirstDANProgram program
*
* Author        : codac-dev
*
* Copyright (c) : 2010-2021 ITER Organization,
*				  CS 90 046
*				  13067 St. Paul-lez-Durance Cedex
*				  France
*
* This file is part of ITER CODAC software.
* For the terms and conditions of redistribution or use of this software
* refer to the file ITER-LICENSE.TXT located in the top level directory
* of the distribution package.
******************************************************************************/

/* Global header files */

/* Local header files */

/* sys-headers.h -- Part of the program template to host all OS-specific program header files */
#include "sys-headers.h"

/* ccs-headers.h -- Part of the program template to host all CCS-specific program header files */
#include "ccs-headers.h"

/* includetopics.h -- Created and maintained by SDD. It includes the list of header files for all the topics the application is participating to. */
#include "includetopics.h" 

/* topicvars.h -- Created and maintained by SDD. Contains the declaration of the application-specific topics and participants. */
#include "topicvars.h" /* The file is optional and associated to the configureSDN, cleanupSDN helper functions which can be replaced by explicit class instantiation */

#include "sdd-dan.h" /*contains all CSS DAN library API definition, etc. */
//if you have extended the data block header for dan..., include the corresponding header

#include "sdd-data.h" //this contains PV list
//include "dan-if.h" /*DAN interface wrappers definition */


using namespace std; 

/* Constants */

/* Type definition */

/* Global variables */

static bool __terminate = false;

/* Function declaration */

/* configure_sdn.cpp -- Created and maintained by SDD. It includes the definition of the application-specific objects and the registration of the topics and participants. */
extern int configureSDN(); /* These functions are optional and can be replaced by bespoke code in case explicit object creation and registration of the participants to the appropriate topic name is favoured. */
extern int cleanupSDN(); 

/* Internal function definition */

void signal_handler (int signal)
{

  log_info("Received signal '%d' to terminate", signal);
  __terminate = true;

};


int main(int argc, char **argv)
{

  /* Install signal handler to support graceful termination */
  sigset(SIGTERM, signal_handler);
  sigset(SIGINT,  signal_handler);
  sigset(SIGHUP,  signal_handler);

  int exValue = 0;
  int tcn_err;
  /* Initialize logging library. */
  InitializeLOG();

  dan_DataCore dc = NULL; //Datacore reference declaration
  dan_Source ds = NULL; //DAN source declaration

  dc = dan_initLibrary_icprog("MyFirstDANProgram"); //DAN library initialization

  if (dc == NULL){
	  log_error("Error during DAN init");
	  exValue = 1;
	  goto END;
  }

  log_info("DAN INIT OK");

  //initialize tcn library
  tcn_err = tcn_init();

  if(tcn_err != TCN_SUCCESS)
  {
	  log_error("TCN init NOK : %s", tcn_strerror(tcn_err));
	  exValue = 1;
	  goto END;
  }

  int blockSize = 100; //Block size constant
  int nBlocks = 200; //Number of blocks constant
  int sampleSize = 8; //Size in bytes of samples
  long sampleCounter = 0; //Counter of samples already produced
  int result; // For result values

  //Initialize source with a internal DAQBuffer with a size
  //of blockSize*nBlocks*sampleSize bytes

  ds = dan_publisher_publishSource_withDAQBuffer(dc,
		  	  	  	  	  	  	  	  DummySrc,
									  blockSize*nBlocks*sampleSize);
  if (ds == NULL) {
	  log_final("Error while publishing DAN source %s", DummySrc);
	  exValue = 1;
	  goto END;
  }

  log_info("DAN PUBLISH SOURCE OK");

  int samplingRate = 1000;
  float *values;
  values = (float*) malloc (blockSize * sampleSize);
  // Open a new stream in the source previously initialized
  //with 1000 samples/second of sampling rate
  // and 0 bytes of initial offset into DAQBuffer.

  dan_publisher_openStream (ds, samplingRate, 0);

 // DAN_DATA_BLOCK_HEADER_TYPE_IMG blockHead;
 // blockHead.pos_x = 100;
 // blockHead.pos_y = 1100;

  /*This block dublicates the previously declared thing!!!!!*/
  /*int samplingRate = 100000;
  float *values;
  values = (float *)malloc(blockSize * sampleSize);
  //Open a new stream in the source previously initialized
  //with 100*1000 samples/second of sampling rate
  //and 0 bytes of initial offset into DAQBuffer.
  dan_publisher_openStream(ds,samplingRate,0);
  */

  //This block uses unknown function toterminate and so on
 /* while(!to_terminate && (tcn_wait_until_hr(till,&tBase,0)==
  TCN_SUCCESS)) {

  // Local function to fill float values
  initBufferWithData((char *)values,
  blockSize*sampleSize,
  sampleCounter);

  // To calculate first timeStamp (only first time)
  if (tBase==0) {
  res = tcn_get_time(&tBase) - (blockSize * 1000000000 /
  samplingRate);
  }*/

  // datablock header structure has been defined in .h
  // header file that was automatically generated from SDD
  // editor. It includes default fields and datablock header
  // extension (pos_x and pos_y) in this case
  /***this part is optional put NULL if you dont need, and
  update dan_config.xml accordingly****/

  //blockHead.std_header.dim1=1;
  //blockHead.std_header.dim2=1;
  //blockHead.std_header.operational_mode=0;
  //blockHead.std_header.sampling_rate= samplingRate;
  //blockHead.pos_x +=1;
  //blockHead.pos_y +=1;

  // Push new data block and its modified header into source
  //put NULL if you didnt define blockHead
  //timestamp is absolute timestamp

  /* It needs to be changed to other function!!!!!

  result=dan_publisher_putDataBlock (ds,
  (till),
  (char *) values,
  blockSize*sampleSize,
  (char *)&blockHead);
  */

  // Detected overflow in pass datablock reference queue
  if (result == -1) {
  log_info("%s, Queue overflow with policy %d\n",
  DummySrc,dan_publisher_getCheckPolicy(ds));
  }

  // Detected overflow in DAQBuffer
  else if (result == -2) {
  log_info("%s, DAQ buffer overflow \
  with policy %d\n",
  DummySrc,
  dan_publisher_getCheckPolicy(ds));
  }

  sampleCounter += blockSize;
  till = till + 1000000L ;
  }



  /* Initialize SDN - Creates the necessary resources and verifies machine-specific configuration. */
  if (initializeSDN() != SR_OK)
    {
      log_final("initializeSDN() failed");
      return (1);
    }
  
  /* Configure SDN application - Creates application-specific participants and register them to use appropriate topic names. */
  if (configureSDN() != SR_OK) /* This function is optional and can be replaced by bespoke code in case explicit object creation and registration is favoured. */
    {
      terminateSDN();
      log_final("configureSDN() failed");
      return (1);
    }
  
  while (__terminate != true) 
    {

      /* -- User shall insert here application-specific code to publish/receive data -- */
      /* -- Refer to SDN Software User Manual for the documentation of the SDN API -- */
      
      /* -- API call to publish data on a topic -- */
      // publisher_xxx.publish(p_userdata_xxx); // Replacing xxx with the appropriate topic name
      
      /* -- API call to receive data on a topic - Blocking call with optional timeout -- */
      // subscriber_yyy.receive(s_userdata_yyy); // Replacing yyy with the appropriate topic name 
      
      /* -- API call to define an application-specific callback to receive data on a topic - Non-blocking mode -- */
      // subscriber_yyy.setReceiveCallback(<callback>); 

      /* Just idle spinning */
      wait_for(100000000L);

    }
      
  /* Unregister participants and delete application-specific objects. */
  cleanupSDN(); /* This function is optional and can be replaced by bespoke code in case explicit object destruction is favoured. */
  
  /* Release SDN resources. */
  terminateSDN();
  
  log_info( "DAN end of acquisition, closing all resources");
  // Closing stream
  dan_publisher_closeStream(ds);
  END:
  // Free local values array
  if (values != NULL) {
  free(values);
  }
  // Unpublishing source from DAN API
  if (ds != NULL) {
  dan_publisher_unpublishSource(dc, ds);
  }
  // Closing DAN API library
  if (dc != NULL) {
  dan_closeLibrary(dc);
  }

  log_info( "DAN end of acquisition, resources are now closed");
  log_flush_queue();
  log_finalize();
  return exValue;

  /* Terminate logging library. */
  TerminateLOG();

  return (0);
  
}
